knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(tidyr)
# date format library
library(lubridate)
# geolibraries
library(rgdal)
library(sp)
library(raster)
tickets$Citation.Issue.Weekday <- as.factor(tickets$Citation.Issue.Weekday)
str(tickets)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(tidyr)
# date format library
library(lubridate)
# geolibraries
library(rgdal)
library(sp)
library(raster)
getwd()
tickets <- data.frame(read.csv('Muni_Driver_Reported_Transit_Only_Lane_Violations.csv', header = T, sep = ","))
#Check dimensions of dataset
dim(tickets)
#Check variable names
colnames(tickets)
#Examine structure of the data
str(tickets)
# Format Date and Month columns
#Change citation issue date from string to month/day/year date variable
tickets$Citation.Issue.Date <- mdy(tickets$Citation.Issue.Date)
#Populate blank column for citation issue month with month of citation issue date
tickets$Citaton.Issue.Month <- NULL
tickets$Citation.Issue.Month <- month(tickets$Citation.Issue.Date, label = TRUE)
# Convert Amount.Paid from factor to numeric
tickets$Amount.Paid <- as.numeric(tickets$Amount.Paid)
# New Column "Paid.On.Time" (1 = true, 0 = false). Based on assumption that late payments have to pay an extra fine and, thus, Amount.Paid > Fine.Ammount
tickets$Paid.On.Time <- ifelse(tickets$Amount.Paid > tickets$Amount.Due, 1, 0)
tickets$Paid.On.Time <- as.factor(tickets$Paid.On.Time)
# Seperate Geom vriable into 2 separate latitude and longitude numeric variables
## remove parentheses from Geom variable
tickets$Geom <- substr(tickets$Geom, 2, nchar(as.character(tickets$Geom))-1)
## split string at comma & create new columns
out <- strsplit(as.character(tickets$Geom), ", ")
##Drop observations with no Geom data. ***21 OBSERVATIONS DROPPED***
tickets <- tickets[!(is.na(tickets$Geom) | tickets$Geom == ""), ]
tickets <- data.frame(tickets, do.call(rbind, out))
rm(out)
## rename columns and set str to numeric
names(tickets)[names(tickets) == "X1"] <- "Latitude"
names(tickets)[names(tickets) == "X2"] <- "Longitude"
tickets$Latitude <- as.numeric(as.character(tickets$Latitude))
tickets$Longitude <- as.numeric(as.character(tickets$Longitude))
head(tickets)
# Create column indicating the year the ticket was issued
tickets$Citation.Issue.Year <- year(tickets$Citation.Issue.Date)
# Create column indicating DayOfWeek (Sunday (1) to Saturday (7)) that the ticket was issued
tickets$Citation.Issue.DayOfWeek <- wday(tickets$Citation.Issue.Date)
# Convert Citation.Issue.DayOfWeek from 1, 2, 3, 4, 5, 6, 7 to Mon, Tues, Wed, Thurs, Fri, Sat
tickets$Citation.Issue.DayOfWeek <- wday(tickets$Citation.Issue.Date, label = TRUE)
# Create column indicating whether the ticket was issued on: weekday (1), weekend (0)
tickets$Citation.Issue.Weekday <- ifelse(tickets$Citation.Issue.DayOfWeek >= 2 & tickets$Citation.Issue.DayOfWeek <= 6, 1, 0)
tickets$Citation.Issue.Weekday <- as.factor(tickets$Citation.Issue.Weekday)
# Create column for Hour of citation issuance. Drop observations with no Citation.Issue.Time data. ***0 OBSERVATIONS DROPPED***
tickets <- tickets[!(is.na(tickets$Citation.Issue.Time) | tickets$Citation.Issue.Time == ""), ]
outTime <- strsplit(as.character(tickets$Citation.Issue.Time), ":")
tickets <- data.frame(tickets, do.call(rbind, outTime))
names(tickets)[names(tickets) == "X1"] <- "Citation.Issue.Hour"
names(tickets)[names(tickets) == "X2"] <- "Citation.Issue.Minute"
tickets$Citation.Issue.Hour <- as.numeric(as.character(tickets$Citation.Issue.Hour))
tickets$Citation.Issue.Minute <- NULL
rm(outTime)
# Create column from Month-Year
tickets <- within(tickets, Citation.Issue.MonthYear <- paste(Citation.Issue.Month, "-", Citation.Issue.Year, sep=""))
# Drop "Unapplied" and empty/NA observations within Citation.Status. Unapplied result is outside the scope of this project. ***84 OBSERVATIONS DROPPED***
tickets <- tickets[!(is.na(tickets$Citation.Status) | tickets$Citation.Status =="" | tickets$Citation.Status == "Unapplied"),]
# Drop extraneous variables: Object.ID (just row index), Location (Not need street address b/c we have latitude and longitude), Last.Edited.Date (empty column), Suspend.Code (NA), Disposition.Code (NA), Violation.Code (have this info in Violation variable)
tickets$Object.ID <- NULL
tickets$Location <- NULL
tickets$Last.Edited.Date <- NULL
tickets$Suspend.Code <- NULL
tickets$Disposition.Code <- NULL
tickets$Violation.Code <- NULL
# Drop "NO VIOL" observations in Violation variable. ***1 OBSERVATIONS DROPPED***
tickets <- tickets[!(tickets$Violation == "NO VIOL"),]
# Create neighborhood column using Lat/Long and Census Block Data from shp file
## Thanks to Shekeine for instructions: http://stackoverflow.com/questions/29872109/binning-longitude-latitude-labeled-data-by-census-block-id
## Load Census tract data for San Fransisco
#tractSF <- shapefile('Analysis Neighborhoods - 2010 census tracts assigned to neighborhoods/geo_export_72577790-b6d5-439f-9b51-edc69b942ac6.shp')
#Check dimensions of cleaned dataset
dim(tickets)
#Check all variable names
colnames(tickets)
#Examine structure of cleaned dataset
str(tickets)
install.packages("ggmap", repos="http://cran.rstudio.com/")
library(ggmap)
sanfran <- c(lon = -122.42, lat = 37.77)
sanfran_map <- get_map(location = sanfran, zoom = 13)
ggmap(sanfran_map) + geom_point(data = tickets, aes(x = Longitude, y = Latitude))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(tidyr)
# date format library
library(lubridate)
# geolibraries
library(rgdal)
library(sp)
library(raster)
# mapping/plooting
library(ggmap)
sanfran <- c(lon = -122.42, lat = 37.77)
sanfran_map <- get_map(location = sanfran, zoom = 13)
sanfran_map <- get_map(location = sanfran, zoom = 13)
ggmap(sanfran_map) + geom_point(data = tickets, aes(x = Longitude, y = Latitude))
str(tickets)
library(ggmap)
View(tickets)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(tidyr)
# date format library
library(lubridate)
# geolibraries
library(rgdal)
library(sp)
library(raster)
# mapping/plooting
library(ggmap)
library(foreign)
tickets1 <- data.frame(read.csv('Muni_Driver_Reported_Transit_Only_Lane_Violations.csv', header = T, sep = ","))
head(tickets$Latitude)
head(tickets$Latitude[1])
str(tickets1)
getwd()
tickets <- data.frame(read.csv('Muni_Driver_Reported_Transit_Only_Lane_Violations.csv', header = T, sep = ","))
#Check dimensions of dataset
dim(tickets)
#Check variable names
colnames(tickets)
#Examine structure of the data
str(tickets)
# Format Date and Month columns
#Change citation issue date from string to month/day/year date variable
tickets$Citation.Issue.Date <- mdy(tickets$Citation.Issue.Date)
#Populate blank column for citation issue month with month of citation issue date
tickets$Citaton.Issue.Month <- NULL
tickets$Citation.Issue.Month <- month(tickets$Citation.Issue.Date, label = TRUE)
# Convert Amount.Paid from factor to numeric
tickets$Amount.Paid <- as.numeric(tickets$Amount.Paid)
tickets$Paid.On.Time <- ifelse(tickets$Amount.Paid > tickets$Amount.Due, 1, 0)
tickets$Paid.On.Time <- as.factor(tickets$Paid.On.Time)
tickets$Geom <- substr(tickets$Geom, 2, nchar(as.character(tickets$Geom))-1)
out <- strsplit(as.character(tickets$Geom), ", ")
out <- strsplit(as.character(tickets$Geom), ", ")
tickets <- tickets[!(is.na(tickets$Geom) | tickets$Geom == ""), ]
tickets <- data.frame(tickets, do.call(rbind, out))
rm(out)
names(tickets)[names(tickets) == "X1"] <- "Latitude"
names(tickets)[names(tickets) == "X2"] <- "Longitude"
tickets$Latitude <- as.numeric(as.character(tickets$Latitude))
37.7792271487 - tickets$Latitude[1]
tickets$Latitude[1]
tickets$Citation.Issue.Time <- NULL
tickets$Citation.Status <- as.factor(as.character(tickets$Citation.Status))
str(tickets$Citation.Status)
tickets$Citation.Status <- as.factor(as.character(tickets$Citation.Status))
str(tickets$Citation.Status)
count(tickets$Citation.Status)
tickets$Citation.Status <- as.factor(tickets$Citation.Status, c("Closed","Open"))
tickets$Citation.Status <- as.factor(tickets$Citation.Status, level=c("Closed","Open"))
tickets$Citation.Status <- as.factor(tickets$Citation.Status, levels=c("Closed","Open"))
levels(tickets$Citation.Status) <- list("Open" = "Open", "Closed" = "Closed")
count(tickets$Citation.Status)
table(tickets$Citation.Status)
str(tickets$Citation.Status)
tickets$Citation.Status <- as.factor(tickets$Citation.Status, levels=list("Closed","Open"))
getwd()
tickets <- data.frame(read.csv('Muni_Driver_Reported_Transit_Only_Lane_Violations.csv', header = T, sep = ","))
#Check dimensions of dataset
dim(tickets)
#Check variable names
colnames(tickets)
#Examine structure of the data
str(tickets)
# Format Date and Month columns
#Change citation issue date from string to month/day/year date variable
tickets$Citation.Issue.Date <- mdy(tickets$Citation.Issue.Date)
#Populate blank column for citation issue month with month of citation issue date
tickets$Citaton.Issue.Month <- NULL
tickets$Citation.Issue.Month <- month(tickets$Citation.Issue.Date, label = TRUE)
# Convert Amount.Paid from factor to numeric
tickets$Amount.Paid <- as.numeric(tickets$Amount.Paid)
# New Column "Paid.On.Time" (1 = true, 0 = false). Based on assumption that late payments have to pay an extra fine and, thus, Amount.Paid > Fine.Ammount
tickets$Paid.On.Time <- ifelse(tickets$Amount.Paid > tickets$Amount.Due, 1, 0)
tickets$Paid.On.Time <- as.factor(tickets$Paid.On.Time)
# Seperate Geom variable into 2 separate latitude and longitude numeric variables
## remove parentheses from Geom variable
tickets$Geom <- substr(tickets$Geom, 2, nchar(as.character(tickets$Geom))-1)
## split string at comma & create new columns
out <- strsplit(as.character(tickets$Geom), ", ")
##Drop observations with no Geom data. ***21 OBSERVATIONS DROPPED***
tickets <- tickets[!(is.na(tickets$Geom) | tickets$Geom == ""), ]
tickets <- data.frame(tickets, do.call(rbind, out))
rm(out)
## rename columns and set str to numeric
names(tickets)[names(tickets) == "X1"] <- "Latitude"
names(tickets)[names(tickets) == "X2"] <- "Longitude"
tickets$Latitude <- as.numeric(as.character(tickets$Latitude))
tickets$Longitude <- as.numeric(as.character(tickets$Longitude))
head(tickets)
# Create column indicating the year the ticket was issued
tickets$Citation.Issue.Year <- year(tickets$Citation.Issue.Date)
# Create column indicating DayOfWeek (Sunday (1) to Saturday (7)) that the ticket was issued
tickets$Citation.Issue.DayOfWeek <- wday(tickets$Citation.Issue.Date)
# Convert Citation.Issue.DayOfWeek from 1, 2, 3, 4, 5, 6, 7 to Mon, Tues, Wed, Thurs, Fri, Sat
tickets$Citation.Issue.DayOfWeek <- wday(tickets$Citation.Issue.Date, label = TRUE)
# Create column indicating whether the ticket was issued on: weekday (1), weekend (0)
tickets$Citation.Issue.Weekday <- ifelse(tickets$Citation.Issue.DayOfWeek >= 2 & tickets$Citation.Issue.DayOfWeek <= 6, 1, 0)
tickets$Citation.Issue.Weekday <- as.factor(tickets$Citation.Issue.Weekday)
# Create column for Hour of citation issuance. Drop observations with no Citation.Issue.Time data. ***0 OBSERVATIONS DROPPED***
tickets <- tickets[!(is.na(tickets$Citation.Issue.Time) | tickets$Citation.Issue.Time == ""), ]
outTime <- strsplit(as.character(tickets$Citation.Issue.Time), ":")
tickets <- data.frame(tickets, do.call(rbind, outTime))
names(tickets)[names(tickets) == "X1"] <- "Citation.Issue.Hour"
names(tickets)[names(tickets) == "X2"] <- "Citation.Issue.Minute"
tickets$Citation.Issue.Hour <- as.numeric(as.character(tickets$Citation.Issue.Hour))
tickets$Citation.Issue.Minute <- NULL
rm(outTime)
# Create column from Month-Year
tickets <- within(tickets, Citation.Issue.MonthYear <- paste(Citation.Issue.Month, "-", Citation.Issue.Year, sep=""))
# Drop "Unapplied" and empty/NA observations within Citation.Status. Unapplied result is outside the scope of this project. ***84 OBSERVATIONS DROPPED***
tickets <- tickets[!(is.na(tickets$Citation.Status) | tickets$Citation.Status =="" | tickets$Citation.Status == "Unapplied"),]
levels(tickets$Citation.Status) <- list("Open" = "Open", "Closed" = "Closed")
# Drop extraneous variables: Object.ID (just row index), Location (Not need street address b/c we have latitude and longitude), Last.Edited.Date (empty column), Suspend.Code (NA), Disposition.Code (NA), Violation.Code (have this info in Violation variable), Citation.Issue.Time (Not needed for analysis)
tickets$Object.ID <- NULL
tickets$Location <- NULL
tickets$Last.Edited.Date <- NULL
tickets$Suspend.Code <- NULL
tickets$Disposition.Code <- NULL
tickets$Violation.Code <- NULL
tickets$Citation.Issue.Time <- NULL
# Drop "NO VIOL" observations in Violation variable. ***1 OBSERVATIONS DROPPED***
tickets <- tickets[!(tickets$Violation == "NO VIOL"),]
# Create neighborhood column using Lat/Long and Census Block Data from shp file
## Thanks to Shekeine for instructions: http://stackoverflow.com/questions/29872109/binning-longitude-latitude-labeled-data-by-census-block-id
## Load Census tract data for San Fransisco
#tractSF <- shapefile('Analysis Neighborhoods - 2010 census tracts assigned to neighborhoods/geo_export_72577790-b6d5-439f-9b51-edc69b942ac6.shp')
str(tickets$Citation.Status)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(tidyr)
# date format library
library(lubridate)
# geolibraries
library(rgdal)
library(sp)
library(raster)
# mapping/plooting
library(ggmap)
library(foreign)
#Check dimensions of cleaned dataset
dim(tickets)
#Check all variable names
colnames(tickets)
#Examine structure of cleaned dataset
str(tickets)
dim(tickets)
colnames(tickets)
str(tickets)
clear()
clear
knitr::opts_chunk$set(echo = TRUE)
#load package vcd
library(vcd)
install.packages(vcd)
install.packages("vcd")
install.packages(c("faraway","modelr","broom","stats"))
install.packages(c("faraway", "modelr", "broom", "stats"))
install.packages(c("faraway", "modelr", "broom", "stats"))
install.packages(c("faraway", "modelr", "broom", "stats"))
install.packages(c("faraway", "modelr", "broom", "stats"))
install.packages(c("faraway", "modelr", "broom", "stats"))
install.packages(c("faraway", "modelr", "broom", "stats"))
knitr::opts_chunk$set(echo = TRUE)
#load package vcd
library(vcd)
str(Arthritis)
#We can see from the summary that we have several factor (categorical) level and one ordered factor (ordinal)
# So if we want to run a test of indendence and Chi Square is perfect,
#Trying to determine if Treatment and Improved are independent
#We will set the signifance level at .05 and generate a test statistic
chisq.test(Arthritis$Treatment,Arthritis$Improved)
# Results show us that p value is less than .05 meaning are test is significant
#You can also create a table first, some people like to do this because it makes certain steps more visable, such percentages in the categories and totals
tbl <- table(Arthritis$Treatment, Arthritis$Improved)
#The results should be the same.
chisq.test(tbl)
#For this example we are going to use data from the faraway library from the package with the same name.
library(faraway)
#The data set is stat500, so let's take a look
str(stat500)
#Determine whether midterm and homework grades predict the final
model.final <- lm(final~midterm+hw,data=stat500)
summary(model.final)
coef(model.final)
#Data grid is a function ininstaside the grid package that is a useful tool for creating graphics
library(modelr)
model.final.pred <- add_predictions(stat500,model.final)
head(model.final.pred)
library(ggplot2)
ggplot(model.final.pred,aes(final,pred))+geom_point(aes(final,pred))+geom_line(aes(pred), colour="red", size=1)
# We can also add the residuals
model.final.pred <- add_residuals(model.final.pred,model.final)
head(model.final.pred)
ggplot(model.final.pred, aes(resid))+geom_freqpoly(binwidth=.05)
library(broom)
#tidy will create a dataframe of our results
z <-  tidy(model.final)
z
#augment will add the model output
Model_Summary <- augment(model.final)
head(Model_Summary)
library(stats)
predict(model.final,data.frame(midterm=c(17,20,25),hw=c(20,22,29)))
lm <- lm(mpg ~ cyl + disp, data = mtcars)
summary(mtcars)
lm.mtcars <- lm(mpg ~ cyl + disp, data = mtcars)
summary(lm.mtcars)
rm(lm)
lm.mtcars <- lm(mpg ~ ., data = mtcars)
summary(lm.mtcars)
lm.mtcars <- lm(mpg ~ . - wt, data = mtcars)
summary(lm.mtcars)
lm.mtcars1 <- lm(mpg ~ cyl + disp, data = mtcars)
lm.mtcars2 <- lm(mpg ~ ., data = mtcars)
lm.mtcars3 <- lm(mpg ~ . - wt, data = mtcars)
summary(lm.mtcars)
summary(c("lm.mtcars1", "lm.mtcars2", "lm.mtcars3"))
summary(lm.mtcars1)
rm(mtcars)
rm(lm.mtcars)
